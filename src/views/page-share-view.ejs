<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
      <title><%=data.name%> | <%=data.file.metadata.name%></title>
      
       <!-- Favicon -->
       <link rel="shortcut icon" href="/assets/images/favicon.ico" />
       
       <link rel="stylesheet" href="/assets/css/backend-plugin.min.css">
       <link rel="stylesheet" href="/assets/css/backende209.css?v=1.0.0">
       
       <!-- <link rel="stylesheet" href="/assets/vendor/%40fortawesome/fontawesome-free/css/all.min.css"> -->
      <link rel="stylesheet" href="/assets/vendor/fontawesome/css/fontawesome.min.css">
         <link rel="stylesheet" href="/assets/vendor/fontawesome/css/solid.css">
 
         <!-- new Vendors -->
         <link rel="stylesheet" href="/assets/vendor/tagsinput/bootstrap-tagsinput.css">
         <!-- new Vendors -->
 
         <link rel="stylesheet" href="/assets/vendor/bootstrap/bootstrap-grid.min.css">
         <!-- <script src="/assets/vendor/bootstrap/bootstrap.min.js"></script> -->
 <body class=" color-light ">

    <style>
        .countdown {
  text-align: center;
}

.time {
  font-size: 2rem;
  margin-bottom: 1rem;
}
    </style>

    <!-- loader Start -->
    <div id="loading">
          <div id="loading-center">
          </div>
    </div>
    <!-- loader END -->

    <script> 
        var fileid  = "<%=data.file.id%>";
        var filename  = "<%=data.file.metadata.name%>";
       
    </script>

    <%
        let date  = data.file.file_metadata.share_settings.available_date;
        let time = data.file.file_metadata.share_settings.available_time;
       // if(date==""){
       //     date  = Date.now();
       //}
       // if(time==""){
       //     time  = "00:00";
       // }
      let datex  = new Date(date);
      datex.setHours(time.split(":")[0]);
      datex.setMinutes(time.split(":")[1]);
      let timeDifference = new Date() - datex;
        %>
    <!-- Wrapper Start -->
    <div class="wrapper">
      
          <div class="iq-top-navbar w-100">
          <div class="iq-navbar-custom">
              <nav class="navbar navbar-expand-lg navbar-light p-0">
              <div class="iq-navbar-logo d-flex align-items-center justify-content-between">
                  <a href="/" class="header-logo">
                      <img src="/assets/images/logo.png" class="img-fluid rounded-normal light-logo" alt="logo">
                      <img src="/assets/images/logo-white.png" class="img-fluid rounded-normal darkmode-logo" alt="logo">
                  </a>
              </div>
                  <div class="iq-search-bar device-search">
                    <%=data.file.metadata.name%> (owner : <%=data.file.createdBy%>)

                  </div>
      
                  <div class="d-flex align-items-center">
                      <div class="change-mode">
                          <div class="custom-control custom-switch custom-switch-icon custom-control-inline">
                              <div class="custom-switch-inner">
                                  <p class="mb-0"> </p>
                                  <input type="checkbox" class="custom-control-input" id="dark-mode" data-active="true">
                                  <label class="custom-control-label" for="dark-mode" data-mode="toggle">
                                      <span class="switch-icon-left"><i class="fa-solid fa-sun"></i></span>
                                      <span class="switch-icon-right"><i class="fa-solid fa-moon"></i></span>
                                  </label>
                              </div>
                          </div>
                      </div>
                      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"  aria-label="Toggle navigation">
                        <i class="fa-solid fa-bars"></i>
                      </button>
                      <div class="collapse navbar-collapse" id="navbarSupportedContent">
                          <ul class="navbar-nav ml-auto navbar-list align-items-center">
                       
                          <li class="nav-item nav-icon dropdown">
                              <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton01" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                <i class="fa-solid fa-question"></i>
                              </a>
                              <div class="iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownMenuButton01">
                                  <div class="card shadow-none m-0">
                                      <div class="card-body p-0 ">
                                          <div class="p-3">
                                              <a href="#" class="iq-sub-card pt-0"><i class="fa-solid fa-handshake-angle"></i></i>Help</a>
                                              <a href="#" class="iq-sub-card"><i class="fa-solid fa-train"></i>Training</a>
                                              <a href="#" class="iq-sub-card"><i class="fa-solid fa-arrow-up"></i>Updates</a>
                                              <a href="#" class="iq-sub-card"><i class="fa-solid fa-note-sticky"></i>Terms and Policy</a>
                                              <a href="#" class="iq-sub-card"><i class="fa-solid fa-bullhorn"></i>Send Feedback</a>
                                          </div>
                                      </div>
                                  </div>
                              </div>
                          </li>
                          <li class="nav-item nav-icon dropdown"> 
                              <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton02" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" >
                                <i class="fa-solid fa-gear"></i>
                              </a>
                              <div class="iq-sub-dropdown dropdown-menu" aria-labelledby="dropdownMenuButton02">
                                  <div class="card shadow-none m-0">
                                      <div class="card-body p-0 ">
                                          <div class="p-3">
                                             <a href="#" class="iq-sub-card"><i class="fa-solid fa-desktop"></i> Get Drive for desktop</a>
                                         </div>                                
                                      </div>
                                  </div>
                              </div>
                          </li>
                          <li class="nav-item nav-icon dropdown caption-content">
                              <a href="#" class="search-toggle dropdown-toggle" id="dropdownMenuButton03" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" >
                                  <div class="caption bg-primary line-height">P</div>
                              </a>
                              
                          </li>
                          </ul>                     
                      </div> 
                  </div>
              </nav>
          </div>
      </div>
      <%
      if(timeDifference>0||isNaN(timeDifference)){%>
     
      <div class="content-page">
      <div class="container-fluid">
         <div class="row">
            <div class="col-lg-12">
             <div class="row">
                <div class="col-lg-2 col-md-6 col-sm-4"></div>
                <div class="col-lg-6 col-md-6 col-sm-6 mx-3 my-3">
                    <div class="card mb-2">
                        <div class="row no-gutters">
                           <div class="col-md-6 col-lg-4">
                              <img onclick="getContent('<%=data.file.id%>')" src="/assets/images/share-download.png" class="card-img" alt="downloadfile">
                           </div>
                           <div class="col-md-6 col-lg-8">
                              <div class="card-body">
                                 <h4 class="card-title"><%=data.file.metadata.name%></h4>
                                 <p class="card-text">Type : <%=data.file.metadata.mimetype%></p>
                                 <p class="card-text">Size : <%=(((data.file.metadata.size)/1024)/1024).toFixed(3)%> MB</p>
                                 <p class="card-text"><small class="text-muted">createdBy : <%=data.file.createdBy%></small></p>
                                 <button onclick="getContent('<%=data.file.id%>')" type="button"  class="btn btn-success">Download</button>
                              </div>
                           </div>
                        </div>
                     </div>
                </div>
                <div class="col-lg-4 col-md-6 col-sm-6"></div>
             </div>
            </div>
         </div>
      </div>
      </div>
    </div>
    <%
        if(data.user!=undefined&&data.file.createdBy==data.user.email){
            %>
            <script>
                async function getContent(id) {
                   try {
                       id = Number.parseInt(id);
                       let res = await fetch(`/file/${id}/content`,{
                           method : "GET",
                           headers:{
                               "Accept":"*/*"
                           }
                       });
                       if (res.status!=200) {
                        throw new Error(res.statusText);
                       }
                      res.blob().then((resx)=>{
                       const file = new File([resx], filename, { type: resx.type });
           
           
           const downloadLink = document.createElement('a');
           downloadLink.href = URL.createObjectURL(file);
           downloadLink.download = filename; // Set the desired filename and extension
           downloadLink.textContent = 'Download File';
           
           document.body.appendChild(downloadLink);
           
           // Clean up after the download link is clicked or no longer needed
           downloadLink.addEventListener('click', () => {
           //   URL.revokeObjectURL(blobUrl);
             document.body.removeChild(downloadLink);
           });
           downloadLink.click();
           });
                   } catch (error) {
                    alert(error.message)
                    //  window.localStorage.href = window.localStorage.href;  
                   } 
                   }
               </script>
            <%
        }
        if(data.file.password!=null){
            %>
            <script>
                var res;
                async function getContent(id) {
                    let password = prompt("enter password..");
                   try {
                       id = Number.parseInt(id);
                        res = await fetch(`/file/${id}/content?password=${password}`,{
                           method : "GET",
                           headers:{
                               "Accept":"*/*"
                           }
                       });
                       if (res.status!=200) {
                        throw new Error(res.statusText);
                       }
                      res.blob().then((resx)=>{
                       const file = new File([resx], filename, { type: resx.type });
           
           
           const downloadLink = document.createElement('a');
           downloadLink.href = URL.createObjectURL(file);
           downloadLink.download = filename; // Set the desired filename and extension
           downloadLink.textContent = 'Download File';
           
           document.body.appendChild(downloadLink);
           
           // Clean up after the download link is clicked or no longer needed
           downloadLink.addEventListener('click', () => {
           //   URL.revokeObjectURL(blobUrl);
             document.body.removeChild(downloadLink);
           });
           downloadLink.click();
           });
                   } catch (error) {
                    alert(error.message)
                   } 
                   }
              
        </script>
            <%
        }
        else{
            %>
            <script>
                async function getContent(id) {
                   try {
                       id = Number.parseInt(id);
                       let res = await fetch(`/file/${id}/content`,{
                           method : "GET",
                           headers:{
                               "Accept":"*/*"
                           }
                       });
                       if (res.status!=200) {
                        throw new Error(res.statusText);
                       }
                      res.blob().then((resx)=>{
                       const file = new File([resx], filename, { type: resx.type });
           
           
           const downloadLink = document.createElement('a');
           downloadLink.href = URL.createObjectURL(file);
           downloadLink.download = filename; // Set the desired filename and extension
           downloadLink.textContent = 'Download File';
           
           document.body.appendChild(downloadLink);
           
           // Clean up after the download link is clicked or no longer needed
           downloadLink.addEventListener('click', () => {
           //   URL.revokeObjectURL(blobUrl);
             document.body.removeChild(downloadLink);
           });
           downloadLink.click();
           });
                   } catch (error) {
                    alert(error.message)
                    //  window.localStorage.href = window.localStorage.href;  
                   } 
                   }
               </script>
            <%
        }
    %>

  
    <%}
    else {
        timeDifference *= -1;
        %>
        <div class="countdown m" style="margin-top: 15vh;">
            <div class="time" id="timer">00:00:00</div>
          </div>
          <script>
            
            var millsec  =  "<%-timeDifference%>";
            let timeLeft = Number.parseInt(millsec);
            console.log(typeof millsec,millsec);
            const timer = setInterval(() => {
      if (timeLeft > 0) {
        let days = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        let hours = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        let minutes = Math.floor((timeLeft % (1000 * 60 * 60)) / (1000 * 60));
        let seconds = Math.floor((timeLeft % (1000 * 60)) / 1000);
      document.getElementById("timer").innerHTML = `${days}d ${hours}h ${minutes}m ${seconds}s`;
    // document.getElementById("timer").innerHTML = timeLeft;
    } else {
        clearInterval(timer);
        window.location.href = window.location.href;
      }
      timeLeft -= 1000;
    }, 1000);
           </script>
        <%
    }
    %>
    <!-- Wrapper End-->
    <footer class="iq-footer">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-6">
                    <ul class="list-inline mb-0">
                        <li class="list-inline-item"><a href="privacy-policy.html">Privacy Policy</a></li>
                        <li class="list-inline-item"><a href="terms-of-service.html">Terms of Use</a></li>
                    </ul>
                </div>
                <div class="col-lg-6 text-right">
                    <span class="mr-1"><script>document.write(new Date().getFullYear())</script>©</span> <a href="/" class=""><%=data.name+"("+data.version+")"%></a>
                </div>
            </div>
        </div>
    </footer>
    <!-- Backend Bundle JavaScript -->
    <script src="/assets/js/backend-bundle.min.js"></script>
    
    <!-- Chart Custom JavaScript -->
    <script src="/assets/js/customizer.js" defer></script>

    <link rel="stylesheet" href="/assets/vendor/fontawesome/css/fontawesome.min.css">
    <link rel="stylesheet" href="/assets/vendor/fontawesome/css/solid.css">
    
    <!-- app JavaScript -->
    <script src="/assets/js/app.js" defer></script>
    
  </body>

</html>