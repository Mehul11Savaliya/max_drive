#!/usr/bin/env node
require("dotenv").config();

/**
 * Module dependencies.
 */
const os  = require("os");
const cluster  = require("cluster");


const {testDbConnection,sq} = require("../config/db.js");
const usersrv = require('../services/User.js');
const authsrv = require('../services/Auth.js');
const foldersrv  = require("../services/Folder.js");
const filesrv  = require("../services/File.js");
const filemetadatsrv  = require("../services/FileMetadata.js");
const mastersrv  = require("../services/Master.js");
const permissionsrv = require("../services/Permission.js");
const roomsrv = require("../services/Rooms.js");

var app = require('../../app');
var debug = require('debug')('cloud-storage:server');
var http = require('http');
const { start_socket } = require("../config/socketio.js");



var port = normalizePort(process.env.PORT);
app.set('port', port);

(async function () {
  // testDbConnection();
  // await sq.sync({alter:true})
  // await usersrv.sync({force:true});
  // await authsrv.sync({force:true});
  // await foldersrv.sync({alter:true});
  // await filesrv.sync({ alter: true });
  // await filemetadatsrv.sync();
  // await mastersrv.sync();
  // await permissionsrv.sync({alter:true});
  // await roomsrv.sync({force:true});
  
})()

// const cpunum  = os.cpus().length;
// if (cluster.isPrimary) {
//   console.log(`main pid  = ${process.pid}`);
//     for (let i = 0; i < cpunum; i++) {
//           cluster.fork();  
//     }
//     cluster.on("exit",()=>{
//         cluster.fork();
//     })
// }else{
  var server = http.createServer(app);
  server.listen(port)
  server.on('error', onError);
  server.on('listening', onListening);
    start_socket(server);
// }

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
    console.log(`Listening on http://localhost:${addr.port} pid = ${process.pid}`);
  debug('Listening on ' + bind);
}

