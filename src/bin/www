#!/usr/bin/env node
require("dotenv").config();

/**
 * Module dependencies.
 */
const os  = require("os");
const cluster  = require("cluster");
const path = require("path");
const fs = require("fs");


const {testDbConnection,sq} = require("../config/db.js");
const usersrv = require('../services/User.js');
const profilesrv = require("../services/Profile.js");
const authsrv = require('../services/Auth.js');
const foldersrv  = require("../services/Folder.js");
const filesrv  = require("../services/File.js");
const filemetadatsrv  = require("../services/FileMetadata.js");
const mastersrv  = require("../services/Master.js");
const permissionsrv = require("../services/Permission.js");
const roomsrv = require("../services/Rooms.js");
const adminsrv = require("../services/Admin.js");
const audit_jobs = require("../jobs/clean_audit_collection.js");
const file_jobs = require("../jobs/clean_large_files.js");

var app = require('../../app');
var debug = require('debug')('cloud-storage:server');
 var http = require('http');
var https = require("https");
const { start_socket } = require("../config/socketio.js");

// var port = normalizePort(process.env.PORT);
var hport = normalizePort(process.env.PORT);
app.set('port', hport);

(async function () {
  testDbConnection();
  // await sq.sync({alter:true})
  // await usersrv.sync({force:true});
  // await authsrv.sync({force:true});
  // await foldersrv.sync({alter:true});
  // await filesrv.sync({ alter: true });
  // await filemetadatsrv.sync();
  // await mastersrv.sync();
  // await permissionsrv.sync({alter:true});
  // await roomsrv.sync({force:true});
  // await profilesrv.sync({alter:true});
  // await adminsrv.elect_admin();
  
  audit_jobs.start();
  file_jobs.file_cleanup(24*60*60*1000);
})()

//  const cpunum  = os.cpus().length;
//  if (cluster.isPrimary) {
//    console.log(`main pid  = ${process.pid}`);
//      for (let i = 0; i < cpunum; i++) {
//            cluster.fork();  
//      }
//      cluster.on("exit",()=>{
//          cluster.fork();
//      })
//  }else{
  //  var server = http.createServer(app);
   var serverhttps = https.createServer({
    key: fs.readFileSync(path.join(__dirname,"../../",process.env.HTTPS_KEY)),
    cert:fs.readFileSync(path.join(__dirname,"../../",process.env.HTTPS_CERT))
  },app);
 
  //serverhttps.on("listening",()=>{
   
  //})

  //  server.listen(port)
  serverhttps.listen(hport);

  //  server.on('error', onError);
  //  server.on('listening', onListening);

  serverhttps.on('error', onError);
  serverhttps.on('listening', onListening);

    //  start_socket(server);
   start_socket(serverhttps);
//  }

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP/HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  //  var addr = server.address();
  //  var bind = typeof addr === 'string'
  //    ? 'pipe ' + addr
  //    : 'port ' + addr.port;
  //    console.log(`Listening on http://localhost:${addr.port} pid = ${process.pid}`);
  //  debug('Listening on ' + bind);
  var addr = serverhttps.address();
  var bind = typeof addr === 'string'
   ? 'pipe ' + addr
    : 'port ' + 443;
    console.log(`Listening on https://${networkip()}:${addr.port} pid = ${process.pid}`);
  debug('Listening on ' + bind);
}

function networkip() {
  const networkInterfaces = require("os").networkInterfaces();
  let ipAddress;

  // Iterate through network interfaces to find the IPv4 address in the LAN
  Object.keys(networkInterfaces).forEach(interfaceName => {
    const interfaces = networkInterfaces[interfaceName];
    for (let i = 0; i < interfaces.length; i++) {
      const iface = interfaces[i];
      if (iface.family === 'IPv4' && !iface.internal) {
        ipAddress = iface.address;
        break;
      }
    }
  });

  if (ipAddress) {
    return ipAddress
  } else {
    return "127.0.0.1"
  }
}

